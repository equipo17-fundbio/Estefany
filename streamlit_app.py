import streamlit as st
import numpy as np
import time

# Funci√≥n de inicio de sesi√≥n
def login():
    st.title("ü©∫ RehabGest EMG")
    st.subheader("Inicio de Sesi√≥n")
    st.markdown("Por favor, ingresa tus credenciales para continuar.")
    username = st.text_input("üë§ Usuario", placeholder="Ingresa tu usuario")
    password = st.text_input("üîí Contrase√±a", type="password", placeholder="Ingresa tu contrase√±a")
    
    if st.button("Iniciar sesi√≥n"):
        if username == "doctor" and password == "password":  # Placeholder de autenticaci√≥n
            st.success("Inicio de sesi√≥n exitoso üéâ")
            return True
        else:
            st.error("‚ùå Usuario o contrase√±a incorrectos")
    return False

# Panel del doctor
def doctor_panel():
    st.title("Panel del Doctor ü©∫")
    st.markdown("### Bienvenido al panel principal del doctor.")
    st.markdown("Desde aqu√≠ puedes acceder a las opciones disponibles para gestionar a tus pacientes y datos.")

    # Informaci√≥n del proyecto
    st.markdown("""
    ## Desarrollo de una plataforma Web para el Reconocimiento de Gestos con EMG para Aplicaciones en Rehabilitaci√≥n Remota

    ### Introducci√≥n
    La rehabilitaci√≥n f√≠sica, especialmente en pacientes con discapacidades motoras o aquellos en proceso de recuperaci√≥n tras lesiones, representa un desaf√≠o significativo debido a la necesidad de monitoreo y evaluaci√≥n constante a lo largo del tratamiento. Seg√∫n la Organizaci√≥n Mundial de la Salud (OMS), aproximadamente 2.41 mil millones de personas en el mundo presentan condiciones que afectan su movilidad. Sin embargo, solo 1 de cada 5 personas que requieren rehabilitaci√≥n recibe los servicios necesarios debido a barreras de acceso y recursos limitados [1].

    En el √°mbito laboral, sectores como manufactura, transporte e inmobiliaria registran una alta incidencia de accidentes laborales. Seg√∫n el Ministerio de Trabajo y Promoci√≥n del Empleo (MTPE), se reportaron m√°s de 10,800 casos en un periodo de apenas cuatro meses en 2022. De estos, el 36% de las atenciones m√©dicas por accidentes de trabajo corresponden a lesiones en brazos y manos, subrayando la importancia de abordar estas lesiones [2].

    En la √∫ltima d√©cada, la electromiograf√≠a (EMG) ha emergido como una herramienta crucial para evaluar y monitorear la actividad muscular en tiempo real en contextos cl√≠nicos y de investigaci√≥n. Estudios recientes han demostrado que los sistemas de reconocimiento de gestos basados en EMG alcanzan precisiones superiores al 90 % en condiciones controladas [3][4], lo cual es clave para aplicaciones en telemedicina y rehabilitaci√≥n remota.

    La integraci√≥n de tecnolog√≠as avanzadas ha optimizado las estrategias de tratamiento personalizado, mejorando la calidad de vida de personas con discapacidades motrices. Los modelos de redes neuronales destacan como herramientas revolucionarias para analizar datos complejos, particularmente en el procesamiento de se√±ales EMG para aplicaciones de rehabilitaci√≥n [5]. Estas plataformas permiten a los profesionales de la salud realizar evaluaciones continuas desde cualquier lugar, fomentando la telemedicina y mejorando la accesibilidad a los servicios de rehabilitaci√≥n.

    ### Planteamiento de la problem√°tica
    La rehabilitaci√≥n f√≠sica de pacientes con lesiones en extremidades superiores, particularmente en manos y mu√±ecas, enfrenta desaf√≠os significativos debido a la ausencia de monitoreo constante y evaluaci√≥n precisa en cada etapa del tratamiento. Aunque la electromiograf√≠a ha demostrado ser eficaz en la medici√≥n de actividad muscular y reconocimiento de gestos, los sistemas actuales no ofrecen una evaluaci√≥n continua accesible para pacientes y profesionales de la salud.
    
    Adicionalmente, la implementaci√≥n de redes neuronales en el an√°lisis de se√±ales EMG a√∫n es limitada, dificultando evaluaciones precisas en tiempo real. Ante esta problem√°tica, se propone el desarrollo de una plataforma web accesible que integre modelos de redes neuronales para clasificar gestos musculares a partir de se√±ales EMG. Este sistema permitir√° diferenciar movimientos como pu√±o cerrado, mano abierta, flexi√≥n y extensi√≥n de mu√±eca, optimizando el monitoreo continuo en rehabilitaci√≥n.

    ### Soluci√≥n propuesta
    Bas√°ndose en una base de datos previa, se propone desarrollar un modelo de red neuronal para clasificar se√±ales EMG asociadas a gestos musculares espec√≠ficos, integr√°ndolo en una plataforma web interactiva. Este enfoque permitir√° a los profesionales de la salud monitorear el progreso de los pacientes en tiempo real, optimizando tratamientos terap√©uticos.
    
    La implementaci√≥n incluye un modelo de red neuronal profunda, con transferencia de aprendizaje para maximizar la precisi√≥n y generalizaci√≥n. Este sistema se integrar√° en una p√°gina web accesible, desarrollada con Streamlit, para facilitar la interacci√≥n y an√°lisis inmediato de las se√±ales EMG.
    """)

# Gesti√≥n de pacientes
def manage_patients():
    st.title("Gesti√≥n de Pacientes üë•")
    st.markdown("### Aqu√≠ puedes gestionar toda la informaci√≥n relacionada con tus pacientes.")
    action = st.radio("Seleccione una acci√≥n:", ["A√±adir nuevo paciente", "Seleccionar paciente"], horizontal=True)
    
    if action == "A√±adir nuevo paciente":
        st.subheader("A√±adir Nuevo Paciente")
        name = st.text_input("Nombre completo")
        age = st.number_input("Edad", min_value=0)
        sex = st.radio("Sexo", ["Masculino", "Femenino"], horizontal=True)
        dni = st.text_input("DNI")
        if st.button("Guardar Paciente"):
            st.success(f"‚úÖ Paciente **{name}** a√±adido exitosamente.")
    
    elif action == "Seleccionar paciente":
        st.subheader("Seleccionar Paciente")
        search = st.text_input("Buscar paciente por nombre o DNI", placeholder="Ejemplo: Juan P√©rez")
        if search:
            st.write("Resultados de b√∫squeda:")
            st.write(f"üë§ Paciente encontrado: **{search}**")  # Simula un resultado
            if st.button("Seleccionar"):
                st.session_state["selected_patient"] = search
                st.success(f"‚úÖ Paciente **{search}** seleccionado.")

# Perfil del paciente
def patient_profile():
    st.title("Perfil del Paciente üìã")
    patient = st.session_state.get("selected_patient", "Ninguno")
    if patient == "Ninguno":
        st.warning("‚ö†Ô∏è No se ha seleccionado un paciente.")
    else:
        st.markdown(f"### Paciente: {patient}")
        st.markdown("#### Informaci√≥n b√°sica:")
        st.write("Edad: 35 a√±os")  # Ejemplo, puedes conectar con una base de datos
        st.write("DNI: 74110803")
        
        # Subir archivo TXT
        st.markdown("### Subir archivo de se√±ales EMG (.txt)")
        uploaded_file = st.file_uploader("Subir archivo TXT", type="txt")
        
        if uploaded_file:
            st.success("üìÅ Carga de archivo completa.")
            
            # Selecci√≥n del gesto a analizar
            gesture = st.selectbox(
                "Selecciona el gesto a analizar",
                ["Mano en reposo", "Mano cerrada en un pu√±o", "Flexi√≥n de la mu√±eca", "Extensi√≥n de la mu√±eca", "Desviaci√≥n radial", "Desviaci√≥n cubital"]
            )
            
            # Simular procesamiento
            if gesture:
                with st.spinner("Procesando datos..."):
                    time.sleep(3)  # Simula el tiempo de procesamiento
                
                # Simular resultado de an√°lisis
                similarity_percentage = round(np.random.uniform(50, 100), 2)  # Simulaci√≥n de porcentaje
                st.success(f"El paciente realiz√≥ un **{similarity_percentage}%** del gesto esperado: **{gesture}**.")

# Historial del paciente
def patient_history():
    st.title("Historial del Paciente üìú")
    st.markdown("### Progreso registrado:")
    st.table({"Fecha": ["2024-11-20", "2024-11-15"], "Avance (%)": [80, 70]})
    if st.button("Guardar y cerrar"):
        st.success("‚úÖ Datos guardados exitosamente. Puede cerrar la sesi√≥n.")

# Configuraci√≥n de cuenta
def account_settings():
    st.title("‚öôÔ∏è Configuraci√≥n de Cuenta")
    st.markdown("### Aqu√≠ puedes modificar tu informaci√≥n de cuenta.")
    
    with st.expander("Cambiar Nombre de Usuario"):
        new_username = st.text_input("Nuevo nombre de usuario", placeholder="Ingresa tu nuevo nombre de usuario")
        if st.button("Actualizar Nombre de Usuario"):
            if new_username.strip():
                st.success(f"‚úÖ Nombre de usuario actualizado a: **{new_username}**")
            else:
                st.error("‚ö†Ô∏è Por favor, ingresa un nombre de usuario v√°lido.")
    
    with st.expander("Cambiar Contrase√±a"):
        current_password = st.text_input("Contrase√±a actual", type="password", placeholder="Ingresa tu contrase√±a actual")
        new_password = st.text_input("Nueva contrase√±a", type="password", placeholder="Ingresa tu nueva contrase√±a")
        confirm_password = st.text_input("Confirmar nueva contrase√±a", type="password", placeholder="Confirma tu nueva contrase√±a")
        if st.button("Actualizar Contrase√±a"):
            if new_password == confirm_password and new_password.strip():
                st.success("‚úÖ Contrase√±a actualizada exitosamente.")
            else:
                st.error("‚ö†Ô∏è Las contrase√±as no coinciden o son inv√°lidas.")
