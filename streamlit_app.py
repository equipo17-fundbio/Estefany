import streamlit as st
import numpy as np
import time

# Funci√≥n de inicio de sesi√≥n
def login():
    st.title("ü©∫ RehabGest EMG")
    st.subheader("Inicio de Sesi√≥n")
    st.markdown("Por favor, ingresa tus credenciales para continuar.")
    username = st.text_input("üë§ Usuario", placeholder="Ingresa tu usuario")
    password = st.text_input("üîí Contrase√±a", type="password", placeholder="Ingresa tu contrase√±a")
    
    if st.button("Iniciar sesi√≥n"):
        if username == "doctor" and password == "password":  # Placeholder de autenticaci√≥n
            st.session_state["logged_in"] = True
            st.success("Inicio de sesi√≥n exitoso üéâ")
            return True
        else:
            st.error("‚ùå Usuario o contrase√±a incorrectos")
    return False

# Panel del doctor
def doctor_panel():
    st.title("Panel del Doctor ü©∫")
    st.markdown("### Bienvenido al panel principal del doctor.")
    st.markdown("Desde aqu√≠ puedes acceder a las opciones disponibles para gestionar a tus pacientes y datos.")

    # Informaci√≥n del proyecto
    st.markdown(""" 
    ## Desarrollo de una plataforma Web para el Reconocimiento de Gestos con EMG para Aplicaciones en Rehabilitaci√≥n Remota
    ### Introducci√≥n
    La rehabilitaci√≥n f√≠sica, especialmente en pacientes con discapacidades motoras o aquellos en proceso de recuperaci√≥n tras lesiones, representa un desaf√≠o significativo...
    """)

# Gesti√≥n de pacientes
def manage_patients():
    st.title("Gesti√≥n de Pacientes üë•")
    st.markdown("### Aqu√≠ puedes gestionar toda la informaci√≥n relacionada con tus pacientes.")
    
    action = st.radio("Seleccione una acci√≥n:", ["A√±adir nuevo paciente", "Seleccionar paciente"], horizontal=True)
    
    if action == "A√±adir nuevo paciente":
        st.subheader("A√±adir Nuevo Paciente")
        name = st.text_input("Nombre completo")
        age = st.number_input("Edad", min_value=0)
        sex = st.radio("Sexo", ["Masculino", "Femenino"], horizontal=True)
        dni = st.text_input("DNI")
        if st.button("Guardar Paciente"):
            if name and dni:
                st.success(f"‚úÖ Paciente **{name}** a√±adido exitosamente.")
                # Simulamos agregar el paciente a una base de datos
                st.session_state["patients"] = st.session_state.get("patients", []) + [{"name": name, "dni": dni}]
            else:
                st.error("‚ö†Ô∏è Nombre y DNI son obligatorios.")
    
    elif action == "Seleccionar paciente":
        st.subheader("Seleccionar Paciente")
        search = st.text_input("Buscar paciente por nombre o DNI", placeholder="Ejemplo: Juan P√©rez")
        
        if search:
            found_patients = [patient for patient in st.session_state.get("patients", []) if search.lower() in patient["name"].lower() or search.lower() in patient["dni"]]
            if found_patients:
                st.write("Resultados de b√∫squeda:")
                for patient in found_patients:
                    st.write(f"üë§ Paciente encontrado: **{patient['name']}**")
                    if st.button(f"Seleccionar {patient['name']}"):
                        st.session_state["selected_patient"] = patient
                        st.success(f"‚úÖ Paciente **{patient['name']}** seleccionado.")
            else:
                st.warning("‚ö†Ô∏è No se encontr√≥ ning√∫n paciente con ese nombre o DNI.")

# Perfil del paciente
def patient_profile():
    st.title("Perfil del Paciente üìã")
    
    if "selected_patient" not in st.session_state:
        st.warning("‚ö†Ô∏è No se ha seleccionado un paciente.")
        return
    
    patient = st.session_state["selected_patient"]
    st.markdown(f"### Paciente: {patient['name']}")
    st.markdown("#### Informaci√≥n b√°sica:")
    st.write(f"Edad: 35 a√±os")  # Ejemplo, puedes conectar con una base de datos real
    st.write(f"DNI: {patient['dni']}")
        
    # Subir archivo TXT
    st.markdown("### Subir archivo de se√±ales EMG (.txt)")
    uploaded_file = st.file_uploader("Subir archivo TXT", type="txt")
    
    if uploaded_file:
        st.success("üìÅ Carga de archivo completa.")
            
        # Selecci√≥n del gesto a analizar
        gesture = st.selectbox(
            "Selecciona el gesto a analizar",
            ["Mano en reposo", "Mano cerrada en un pu√±o", "Flexi√≥n de la mu√±eca", "Extensi√≥n de la mu√±eca", "Desviaci√≥n radial", "Desviaci√≥n cubital"]
        )
        
        # Simular procesamiento
        if gesture:
            with st.spinner("Procesando datos..."):
                time.sleep(3)  # Simula el tiempo de procesamiento
                
            # Simular resultado de an√°lisis
            similarity_percentage = round(np.random.uniform(50, 100), 2)  # Simulaci√≥n de porcentaje
            st.success(f"El paciente realiz√≥ un **{similarity_percentage}%** del gesto esperado: **{gesture}**.")

# Historial del paciente
def patient_history():
    st.title("Historial del Paciente üìú")
    st.markdown("### Progreso registrado:")
    
    if "selected_patient" in st.session_state:
        st.table({"Fecha": ["2024-11-20", "2024-11-15"], "Avance (%)": [80, 70]})
    
    if st.button("Guardar y cerrar"):
        st.success("‚úÖ Datos guardados exitosamente. Puede cerrar la sesi√≥n.")

# Configuraci√≥n de cuenta
def account_settings():
    st.title("‚öôÔ∏è Configuraci√≥n de Cuenta")
    st.markdown("### Aqu√≠ puedes modificar tu informaci√≥n de cuenta.")
    
    with st.expander("Cambiar Nombre de Usuario"):
        new_username = st.text_input("Nuevo nombre de usuario", placeholder="Ingresa tu nuevo nombre de usuario")
        if st.button("Actualizar Nombre de Usuario"):
            if new_username.strip():
                st.success(f"‚úÖ Nombre de usuario actualizado a: **{new_username}**")
            else:
                st.error("‚ö†Ô∏è Por favor, ingresa un nombre de usuario v√°lido.")
    
    with st.expander("Cambiar Contrase√±a"):
        current_password = st.text_input("Contrase√±a actual", type="password", placeholder="Ingresa tu contrase√±a actual")
        new_password = st.text_input("Nueva contrase√±a", type="password", placeholder="Ingresa tu nueva contrase√±a")
        confirm_password = st.text_input("Confirmar nueva contrase√±a", type="password", placeholder="Confirma tu nueva contrase√±a")
        if st.button("Actualizar Contrase√±a"):
            if new_password == confirm_password and new_password.strip():
                st.success("‚úÖ Contrase√±a actualizada exitosamente.")
            else:
                st.error("‚ö†Ô∏è Las contrase√±as no coinciden o son inv√°lidas.")

# Main function to control the app flow
def main():
    if "logged_in" not in st.session_state or not st.session_state["logged_in"]:
        if not login():
            return
    
    # Menu principal del doctor
    menu = st.sidebar.selectbox("Seleccione una opci√≥n", ["Panel del Doctor", "Gesti√≥n de Pacientes", "Perfil del Paciente", "Historial del Paciente", "Configuraci√≥n de Cuenta"])
    
    if menu == "Panel del Doctor":
        doctor_panel()
    elif menu == "Gesti√≥n de Pacientes":
        manage_patients()
    elif menu == "Perfil del Paciente":
        patient_profile()
    elif menu == "Historial del Paciente":
        patient_history()
    elif menu == "Configuraci√≥n de Cuenta":
        account_settings()

if __name__ == "__main__":
    main()
